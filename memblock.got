package store

import (
    "math"
    "sync"
)

type {{.t}}MemBlock struct {
    store       *default{{.T}}Store
    id          uint32
    fileID      uint32
    fileOffset  uint32
    toc         []byte
    values      []byte
    discardLock sync.RWMutex
}

func (memBlock *{{.t}}MemBlock) timestampnano() int64 {
    return math.MaxInt64
}

func (memBlock *{{.t}}MemBlock) read(keyA uint64, keyB uint64{{if eq .t "group"}}, childKeyA uint64, childKeyB uint64{{end}}, timestampbits uint64, offset uint32, length uint32, value []byte) (uint64, []byte, error) {
    memBlock.discardLock.RLock()
    timestampbits, id, offset, length := memBlock.store.locmap.Get(keyA, keyB{{if eq .t "group"}}, childKeyA, childKeyB{{end}})
    if id == 0 || timestampbits&_TSB_DELETION != 0 {
        memBlock.discardLock.RUnlock()
        return timestampbits, value, ErrNotFound
    }
    if id != memBlock.id {
        memBlock.discardLock.RUnlock()
        return memBlock.store.locBlock(id).read(keyA, keyB{{if eq .t "group"}}, childKeyA, childKeyB{{end}}, timestampbits, offset, length, value)
    }
    value = append(value, memBlock.values[offset:offset+length]...)
    memBlock.discardLock.RUnlock()
    return timestampbits, value, nil
}

func (memBlock *{{.t}}MemBlock) close() error {
    return nil
}
